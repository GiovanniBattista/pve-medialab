# ----------------------------------------------------------------------------------
# Filename:     config.yml
# Description:  FlexGet configuration file.
#               Do not edit this file unless you know what you are doing.
#               All variables are in the "variables_secret.yml" file.
#-----------------------------------------------------------------------------------


#----Testing bash lines ------------------------------------------------------------
#
#---- Run as user 'media'
# su - media
#---- Run FlexGet & FileBot
# ~/.flexget/cookbook/cookbook.sh
# ~/.flexget/cookbook/recipe_00/recipe.sh
#---- Run FlexGet only
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml execute --discover-now
#---- To clear series database
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml database reset-plugin series
# To forget a series (start again)
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml series forget "60 Minutes"
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml seen forget "search-series"
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml failed clear
#---- To list all series/movies
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml series list all
# ~/flexget/bin/flexget -c ~/.flexget/cookbook/recipe_00/config.yml movie-list list all
# ----------------------------------------------------------------------------------


#---- Variables & credentials file
# Not over-written during auto script updates
variables: variables_default.yml

# # Webserver
# web_server:
#   port: 8080
#   web_ui: yes
#   base_url: ~/flexget/bin/flexget

#---- Templates --------------------------------------------------------------------

templates:
  #---- Anchors
  anchors:
    # Deluge
    _deluge: &deluge_credentials
      host: '{? deluge.host ?}'
      port: '{? deluge.port ?}'
      username: '{? deluge.username ?}'
      password: '{? deluge.password ?}'

    # Trakt Credentials
    _trakt_credentials: &trakt_credentials
      username: '{? trakt.username ?}'
      account: '{? trakt.account ?}'

    # Series/TV lookup
    _series_lookup: &series_lookup
      metainfo_series: yes
      tmdb_lookup: yes
      tvmaze_lookup: yes
      trakt_lookup:
        <<: *trakt_credentials

    # Movie lookup
    _movie_lookup: &movie_lookup
      metainfo_movie: yes
      tmdb_lookup: yes
      imdb_lookup: yes
      trakt_lookup:
        <<: *trakt_credentials

  #---- Lists
  trakt_documentary_series_list: &trakt_documentary_series_list
    trakt_list:
      <<: *trakt_credentials
      list: '{? trakt.documentary_series_list ?}'
      type: shows
      strip_dates: yes

  trakt_documentary_movie_list: &trakt_documentary_movie_list
    trakt_list:
      <<: *trakt_credentials
      list: '{? trakt.documentary_movie_list ?}'
      type: movies


  #---- Torrent RSS files
  # Documentary only
  # Add only known documentary rss urls here.
  torrent_rss_documentary: &torrent_rss_documentary
    inputs:
      - rss:
          url: '{? mvgroup.url ?}'
          silent: yes
          all_entries: yes


  #---- Manipulate - Insert 'tmdb_id'/'imdb_id' regexp
  manipulate_insert_id:
    manipulate:
      - title:
          from: filename
      - title:
          replace:
            regexp: '^(.*)(\.torrent)'
            format: '\1.(ID:{{ tmdb_id }})\2'


  #---- Manipulate - MVGroup regexp
  manipulate_mvgroup:
    manipulate:
      ## Series ##
      # edit 'season.one.xx.of.xx' to 's00e00' format
      - title:
          replace:
            regexp: '(season|series|set)\.(one|1|01|i)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's01e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(two|2|02|ii)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's02e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(three|3|03|iii)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's03e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(four|4|04|iv)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's04e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(five|5|05|v)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's05e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(six|6|06|vi)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's06e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(seven|7|07|vii)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's07e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(eight|8|08|viii)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's08e\3'
      - title:
          replace:
            regexp: '(season|series|set)\.(nine|9|09|ix)\.(\d+)(\.)?of(\.)?(\d+)'
            format: 's09e\3'
      # Edit '00of00' to 's00e00'
      - title:
          replace:
            regexp: '(?!(?:season|series|set))(\.|\s)?(\d+)(\.|\s)?of(\.|\s)?(\d+)'
            format: '\1s1e\2'
      # Edit 's00.e00' to 's00e00'
      - title:
          replace:
            regexp: 's(\d+)\.e(\d+)'
            format: 's\1e\2'

      ## Series ##
      # Includes:
      #   - broadcaster
      #   - year
      # Excludes:
      #   - s00e00
      # example: [NHK.Dive.in.Tokyo.2022.Yanaka.Building.on.the.Past.WEB-DL.x264.AAC.MVGroup.Forum.mkv] >> [NHK - Dive.in.Tokyo - Yanaka.Building.on.the.Past.mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_s00e00 ?}{? mvg.capture_broadcaster_name ?}{? mvg.capture_all ?}{? mvg.capture_year ?}{? mvg.capture_all ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\2 - \4 - [series \1 documentary]'

      ## Series ##
      # Includes:
      #   - broadcaster
      #   - s00e00
      # Excludes:
      #   - year
      # example: [NG.Seconds.from.Disaster.s04e06.Bhopal.1080p.HDTV.MVGroup.Forum.mkv] >> [NG - Seconds.from.Disaster - s04e06.mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_year ?}{? mvg.capture_broadcaster_name ?}{? mvg.capture_all ?}{? mvg.capture_s00e00 ?}{? mvg.capture_all ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\2 - \3 - [series \1 documentary]'

      ## Series ##
      # Includes:
      #   - broadcaster
      # Excludes:
      #   - year
      #   - s00e00
      # example: [BBC.Expedition.Volcano.1080p.HDTV.MVGroup.Forum.mkv] >> [BBC - Expedition.Volcano.mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_year ?}{? mvg.exclude_s00e00 ?}{? mvg.capture_broadcaster_name ?}{? mvg.capture_all ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\2 - [series \1 documentary]'

      ## Series ##
      # Includes:
      #   - s00e00
      # Excludes:
      #   - year
      #   - broadcaster
      # example: [Expedition.Volcano.s01e01.1080p.HDTV.MVGroup.Forum.mkv] >> [Expedition.Volcano - s01e01.mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_broadcaster_name ?}{? mvg.exclude_year ?}{? mvg.capture_all ?}{? mvg.capture_s00e00 ?}{? mvg.capture_all ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\1 - \2 - [series documentary]'

      ## Movie ##
      # Includes:
      #   - year
      # Excludes:
      #   - s00e00
      #   - broadcaster
      # example: [Seconds.from.Disaster.2020.1080p.HDTV.MVGroup.Forum.mkv] >> [Seconds.from.Disaster (2020).mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_broadcaster_name ?}{? mvg.exclude_s00e00 ?}{? mvg.capture_all ?}{? mvg.include_year ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\1 (\2) - [movie documentary]'

      ## Unsorted ##
      # Includes:
      # Excludes:
      #   - year
      #   - s00e00
      #   - broadcaster
      # example: [Seconds.from.Disaster.1080p.HDTV.MVGroup.Forum.mkv] >> [Seconds.from.Disaster.mkv]
      - title:
          replace:
            regexp: '^{? mvg.exclude_broadcaster_name ?}{? mvg.exclude_year ?}{? mvg.exclude_s00e00 ?}{? mvg.capture_all ?}{? mvg.quality_metadata ?}{? mvg.capture_all ?}{? mvg.capture_file_ext ?}$'
            format: '\1 - [unsorted documentary]'

      ## Title cleanup ##
      - title:
          replace:
            regexp: '\s\.|\.\s'
            format: ' '
      - title:
          replace:
            regexp: '\.\.'
            format: '.'
      - title:
          replace:
            regexp: '(\s-|\s|-|\.|\.\s)$|^(\s-|\s|-|\.|\.\s)'
            format: ''
      - title:
          replace:
            regexp: '\.(dvd|vcd|netflix|apple)$' # Cleanup messy title ending words
            format: ''


  #---- Settings
  # Global settings
  global-settings:
    # Deluge & torrent settings
    deluge:
      main_file_only: yes
      magnetization_timeout: 15
      keep_subs: yes
    # Convert magnets
    convert_magnet:
      timeout: 10 seconds
      force: yes
    # Make there's 50GB free before adding more downloads
    free_space:
      path: '{? storage.video ?}'
      space: 50000
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    # Limit the frequency of requests to domains so they don't complain about using a bot
    domain_delay:
      showrss.info: 1 seconds
    # TorrentLeech uses cloudflare anti-bot measures, bypass those
    cfscraper: yes
    # Sorting
    sort_by:
      - field: quality
        reverse: yes
      - field: torrent_availability
        reverse: yes

  # Series settings
  series-settings:
    <<: *series_lookup
    # Series lookup lists
    include:
      - include_series.yml
    # Content size
    if:
      - season_pack:
          content_size:
            max: 30000
            min: 200
      - not season_pack:
          content_size:
            max: 10000
            min: 200
            strict: no
    # Settings by source
    sequence:
      - configure_series:
          from:
            <<: *trakt_documentary_series_list
          settings:
            exact: no
            target: 1080p hdtv+
            quality: 1080p webrip+
            timeframe: 18 hours
            propers: 2 days
            specials: no
            identified_by: ep
      # - configure_series:
      #     from:
      #       filesystem:
      #         path:
      #           - '{? storage.video ?}/{? path.documentary_series_dst ?}'
      #         recursive: yes  # No limit to depth, all sub dirs will be accessed
    # Prevent from downloading shows that were acquired or are currently downloading.
    # Add your storage paths for series here to avoid duplication.
    # Documentary series
    exists_series:
      path: '{? storage.video ?}/{? path.documentary_series_dst ?}/{{series_name}}*'
      allow_different_qualities: better
    if:
      - trakt_collected: reject
      - trakt_watched: reject

  # Movie settings
  movie-settings:
    <<: *movie_lookup
    proper_movies: 3 days
    content_size:
      min: 1000
      max: 30000
      strict: no
    quality: 1080p+ webrip+ !dolbyvision
    list_match:
      from:
        - movie_list: Movies
    # Prevent from downloading shows that were acquired
    # or are currently downloading
    exists_series:
      path: '{? storage.video ?}/{? path.documentary_movies_dst ?}'
      allow_different_qualities: better

  # RSS Torrent settings
  simple-lookup-settings:
    # Series lookup lists
    include:
      - include_series.yml
    metainfo_series: yes
    tmdb_lookup: yes

#---- Tasks ------------------------------------------------------------------------

tasks:
  #---- Torrent RSS file downloads
  # Direct download of all RSS feeds included in tmpl: 'torrent_rss_documentary'
  # Downloaded content requires post-processing by Filebot

  torrent_rss_documentary:
    priority: 10
    # Templates
    template:
      - torrent_rss_documentary
      - manipulate_mvgroup
      - global-settings
    # The entry has to have these fields
    require_field:
      - title
    # Sort for Deluge labels
    regexp:
      from: title
      accept:
        # Set dl label & dst - series
        - '{? mvg.sort_series ?}':
            set:
              # Set Deluge label
              label: 'manual-documentary-series'
              # Move completed path
              move_completed_path: '{? storage.downloads_torrent ?}/{? path.documentary_series_src ?}'
              # Rename the "content file" to something nice, deluge specific
              content_filename: "{{ title }}"
        # Set dl label & dst - movie
        - '{? mvg.sort_movie ?}':
            set:
              # Set Deluge label
              label: 'manual-documentary-movie'
              # Move completed path
              move_completed_path: '{? storage.downloads_torrent ?}/{? path.documentary_movies_src ?}'
              # Rename the "content file" to something nice, deluge specific
              content_filename: "{{ title }}"
        # Set dl label & dst - unsorted
        - '{? mvg.sort_unsorted ?}':
            set:
              # Set Deluge label
              label: 'manual-documentary-unsorted'
              # Move completed path
              move_completed_path: '{? storage.downloads_torrent ?}/{? path.documentary_unsorted_src ?}'
              # Rename the "content file" to something nice, deluge specific
              content_filename: "{{ title }}"
    # Deluge downloader
    deluge:
      <<: *deluge_credentials
    # Enable cloudflare scraping
    cfscraper: yes
    # Remember downloaded entries
    seen: local


  #---- Search
  # Search series (non-rss)

  search-series:
    priority: 10
    template:
      - global-settings
      - series-settings
    discover:
      what:
        - next_series_episodes: yes
      from:
        - rarbg:
            category: [18, 41]
        - piratebay:
            category: video
            sort_by: seeds
            url: https://piratebay-proxy.to
        - solidtorrents:
            category: Video
            sort_by: seeders
            remove_potentially_unsafe: yes
            url: https://solidtorrents.net
        - magnetdl:
            category: tv
        - 1337x:
            order_by: seeders
        - newtorrents: yes
    # Deluge downloader
    deluge:
      <<: *deluge_credentials
    if:
      # Set values for documentary series
      - "'documentary' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'news' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'history' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'food' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'war' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'biography' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'nature' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower)":
          set:
            # Set Deluge label
            label: 'manual-documentary-series'
            # Move completed path
            move_completed_path: '{? storage.downloads_torrent ?}/{? path.documentary_series_src ?}'
            # Rename the "content file" to something nice, deluge specific.
            content_filename: "{{ trakt_series_name|default(series_name)|pathscrub }} - {{ trakt_ep_id|default(series_id) }} - [series documentary{% if tmdb_id|default(None) %} {tmdb_tv-{{tmdb_id}}}{% elif tvdb_id|default(None) %} {tvdb-{{tvdb_id}}}{% elif tvmaze_id|default(None) %} {tvmaze-{{tvmaze_id}}}{% endif %}]"
            # Keep subtitles
            keep_subs: no
      # Set values for standard series
      - "not ('documentary' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'news' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'history' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'food' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'war' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'biography' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'nature' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower))":
          set:
            # Set Deluge label
            label: 'manual-series'
            # Move completed path
            move_completed_path: '{? storage.downloads_torrent ?}/{? path.series_src ?}'
            # Rename the "content file" to something nice, deluge specific.
            content_filename: "{{ trakt_series_name|default(series_name)|pathscrub }} - {{ trakt_ep_id|default(series_id) }} - [series{% if tmdb_id|default(None) %} {tmdb_tv-{{tmdb_id}}}{% elif tvdb_id|default(None) %} {tvdb-{{tvdb_id}}}{% elif tvmaze_id|default(None) %} {tvmaze-{{tvmaze_id}}}{% endif %}]"
            # Keep subtitles
            keep_subs: yes
    # Enable cloudflare scraping
    cfscraper: yes

  # Search movies (non-rss)
  search-movies:
    priority: 20
    template:
      - global-settings
      - movie-settings
    discover:
      release_estimations:
        optimistic: 4 weeks
      what:
        - movie_list: Movies
      from:
        - rarbg:
            category: [14, 17, 44, 50, 51, 52]
        - piratebay:
            category: video
            sort_by: seeds
            url: https://tpbworking.net/
        - solidtorrents:
            category: Video
            sort_by: seeders
            remove_potentially_unsafe: yes
            url: https://solidtorrents.net
        - magnetdl:
            category: movies
        - 1337x:
            order_by: seeders
    # Deluge downloader
    deluge:
      <<: *deluge_credentials
    if:
      # Set values for documentary movies
      - "'documentary' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'news' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'history' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'food' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'war' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'biography' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'nature' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower)":
          set:
            # Set Deluge label
            label: 'manual-documentary-movie'
            # Move completed path
            move_completed_path: '{? storage.downloads_torrent ?}/{? path.documentary_movies_src ?}'
            # Rename the "content file" to something nice, deluge specific.
            content_filename: "{{trakt_movie_name|default(movie_name)|pathscrub}} ({{trakt_movie_year|default(movie_year)}}) - [movie documentary{% if tmdb_id|default(None) %} {tmdb-{{tmdb_id}}}{% elif imdb_id|default(None) %} {imdb-{{imdb_id}}}{% endif %}]"
            # Keep subtitles
            keep_subs: yes
      # Set values for standard movies
      - "not ('documentary' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'news' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'history' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'food' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'war' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'biography' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower) or 'nature' in (trakt_genres|lower or trakt_series_genre|lower or tmdb_genres|lower or imdb_genre|lower or tvmaze_genres|lower))":
          set:
            # Set Deluge label
            label: 'manual-movie'
            # Move completed path
            move_completed_path: '{? storage.downloads_torrent ?}/{? path.movies_src ?}'
            # Rename the "content file" to something nice, deluge specific.
            content_filename: "{{trakt_movie_name|default(movie_name)|pathscrub}} ({{trakt_movie_year|default(movie_year)}}) - [movie{% if tmdb_id|default(None) %} {tmdb-{{tmdb_id}}}{% elif imdb_id|default(None) %} {imdb-{{imdb_id}}}{% endif %}]"
            # Keep subtitles
            keep_subs: yes
    # Enable cloudflare scraping
    cfscraper: yes


  #---- Update Queues
  # Trakt documentary movie queue
  trakt-update-documentary-movie-queue:
    priority: 10
    <<: *movie_lookup
    template: trakt_documentary_movie_list
    accept_all: yes
    list_add:
      - movie_list: Movies
    no_entries_ok: yes
    seen: local

  # Trakt documentary series
  trakt-fill-documentary_series_list:
    priority: 20
    trakt_list:
      <<: *trakt_credentials
      list: "{? trakt.documentary_series_list ?}"
      type: episodes
    accept_all: yes
    set_series_begin: yes
    list_remove:
      - trakt_list:
          <<: *trakt_credentials
          list: "{? trakt.documentary_series_list ?}"
          type: episodes
    list_add:
      - trakt_list:
          <<: *trakt_credentials
          list: "{? trakt.documentary_series_list ?}"
          type: shows
    no_entries_ok: yes
    seen: local


  #---- Cleanup
  # Cleanup Trakt documentary series
  trakt-cleanup-documentary_series_list:
    priority: 30
    template: trakt_documentary_series_list
    <<: *series_lookup
    disable: seen
    if:
      - trakt_series_status in ['ended', 'canceled']: accept
    list_remove:
      - <<: *trakt_documentary_series_list
    no_entries_ok: yes
    series_remove: yes

  # Cleanup Trakt documentary movie
  trakt-cleanup-documentary_movie_list:
    priority: 30
    trakt_lookup:
      <<: *trakt_credentials
    template: trakt_documentary_movie_list
    disable: seen
    if:
      - trakt_collected: accept
    list_remove:
      - <<: *trakt_documentary_movie_list
      - movie_list: Movies
    no_entries_ok: yes

  # Cleanup torrents
  cleanup-torrents:
    priority: 100
    disable:
    - seen
    - seen_info_hash
    from_deluge:
      <<: *deluge_credentials
    # Clean only these labels
    if:
      - deluge_label == manual-documentary-series: accept
      - deluge_label == manual-documentary-movie: accept
      - deluge_label == manual-series: accept
      - deluge_label == manual-movie: accept
      - deluge_progress == 100: accept
      - deluge_ratio < 1.0: reject
    deluge:
      <<: *deluge_credentials
      action: purge
    no_entries_ok: yes

  #---- Run bash scripts
  # Not required. Should be exec in 'recipe.sh'
  # bash_scripts:
  #   exec:
  #     on_start:
  #       phase:
  #         # Prune script
  #         - ~/.flexget/cookbook/recipe_00/prune.sh
  #         # FileBot script
  #         - ~/.flexget/cookbook/recipe_00/filebot_run.sh
#-----------------------------------------------------------------------------------